FROM debian:testing

ARG TARGETPLATFORM
#ARG BUILDPLATFORM

# App Path
ARG APP_PATH="/opt/app"



# Skopeo tag
#ARG SKOPEO_TAG="v1.15"
ARG SKOPEO_TAG="latest"

# RegClient tag
#ARG REGCLIENT_TAG="v0.6.0"
ARG REGCLIENT_TAG="latest"

# Crane tag
#ARG CRANE_TAG="v0.19.1"
ARG CRANE_TAG="latest"

# Supercronic tag
#ARG SUPERCRONIC_TAG="v0.2.29"
ARG SUPERCRONIC_TAG="latest"

# Create Directory for App
RUN mkdir -p "/opt"
RUN mkdir -p "${APP_PATH}"

# Change Directory
WORKDIR "${APP_PATH}"

# Copy Sources
COPY app/ "${APP_PATH}"

# Add APT Configuration for more recent (testing) Packages
# Change Directory
WORKDIR "/etc"
# Copy sources.list.d and preferences.d Files
ADD etc /etc/

# Change Workdir Back to App Folder
WORKDIR "${APP_PATH}"

# Use Cache (Keep downloaded Files)
# They are stored in the Cache directory, NOT in the final Container Image
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Update Sources
# Install other Dependencies / recommended Packages
RUN --mount=type=cache,mode=0777,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,mode=0777,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install --no-install-recommends -y ca-certificates bash curl wget jq && \
    echo "Finished installing base Packages"

# Install skopeo
# Not needed anymore when using Binary Packages from https://github.com/lework/skopeo-binary/releases
# RUN --mount=type=cache,mode=0777,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,mode=0777,target=/var/lib/apt,sharing=locked \
#     apt-get update && \
#     apt-get install -y skopeo && \
#     echo "Finished installing Skopeo"

# Install podman
# Needed when using Binary Packages from https://github.com/lework/skopeo-binary/releases since podman would be normally be pulled in together with skopeo
RUN --mount=type=cache,mode=0777,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,mode=0777,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install --no-install-recommends -y podman && \
    echo "Finished installing Podman"

# Setup subuid and subgid in order to avoid Podman triggering WARNING 
RUN echo "root:100000:65536" > /etc/subuid
RUN echo "root:100000:65536" > /etc/subgid



# Setup additional Directories for Podman Secrets
# Not used for now
#RUN mkdir -p /etc/secrets
# chattr fails -> disable this:
#RUN chattr +i /etc/secrets

# Setup additional Directories for Regctl
RUN mkdir -p /etc/regctl
# chattr fails -> disable this:
#RUN chattr +i /etc/regctl
RUN ln -s /etc/regctl /root/.regctl


# Change Shell
RUN chsh -s /bin/bash root
RUN export SHELL="/bin/bash"
RUN ln -sf /bin/bash /bin/sh

# set ENV to execute startup scripts
ENV ENV /etc/profile

# Set PATH Variable
ENV PATH="${APP_PATH}:$PATH"



# Create folder for Caching Packages
RUN mkdir -p /var/lib/installer


# Copy Regclient Installer Script
COPY install-regclient.sh /opt/install-regclient.sh

# RUN Regclient Installer Script
RUN --mount=type=cache,mode=0777,target=/var/lib/installer/regclient,sharing=locked \
    bash -c /opt/install-regclient.sh "${TARGETPLATFORM}" "${REGCLIENT_TAG}"

# Set Path to include RegClient
ENV PATH="/opt/regclient:$PATH"



# Copy Skopeo Installer Script
COPY install-skopeo.sh /opt/install-skopeo.sh

# RUN Skopeo Installer Script
RUN --mount=type=cache,mode=0777,target=/var/lib/installer/skopeo,sharing=locked \
    bash -c /opt/install-skopeo.sh "${TARGETPLATFORM}" "${SKOPEO_TAG}"

# Set Path to include Skopeo
ENV PATH="/opt/skopeo:$PATH"



# Copy Supercronic Installer Script
COPY install-supercronic.sh /opt/install-supercronic.sh

# RUN Supercronic Installer Script
RUN --mount=type=cache,mode=0777,target=/var/lib/installer/supercronic,sharing=locked \
    bash -c /opt/install-supercronic.sh "${TARGETPLATFORM}" "${SUPERCRONIC_TAG}"

# Set Path to include Supercronic
ENV PATH="/opt/supercronic:$PATH"



# Copy Crane Installer Script
COPY install-crane.sh /opt/install-crane.sh

# RUN Crane Installer Script
RUN --mount=type=cache,mode=0777,target=/var/lib/installer/crane,sharing=locked \
    bash -c /opt/install-crane.sh "${TARGETPLATFORM}" "${CRANE_TAG}"

# Set Path to include Crane
ENV PATH="/opt/crane:$PATH"



# Copy and Execute Entrypoint Script
COPY docker-entrypoint.sh /opt/
RUN chmod +x /opt/docker-entrypoint.sh
ENTRYPOINT ["/opt/docker-entrypoint.sh"]
